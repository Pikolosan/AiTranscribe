import OpenAI from "openai";
import dotenv from "dotenv";
dotenv.config();

// Initialize Groq client using Groq's API endpoint
const groq = new OpenAI({
  baseURL: "https://api.groq.com/openai/v1",
  apiKey: process.env.GROQ_API_KEY || "",
});

export async function generateSummary(transcript: string, customInstructions?: string): Promise<string> {
  if (!process.env.GROQ_API_KEY) {
    throw new Error("GROQ_API_KEY environment variable is required");
  }

  if (!transcript.trim()) {
    throw new Error("Transcript content is required");
  }

  try {
    // Construct the prompt based on whether custom instructions are provided
    let prompt = "";
    
    if (customInstructions && customInstructions.trim()) {
      prompt = `Please process the following meeting transcript according to these specific instructions: "${customInstructions.trim()}"

Transcript:
${transcript}

Please provide a well-structured summary following the given instructions.`;
    } else {
      prompt = `Please summarize the following meeting transcript in a clear, well-structured format. Include key discussion points, decisions made, action items with responsible parties and deadlines where mentioned, and next steps.

Transcript:
${transcript}

Please provide a comprehensive summary organized with appropriate headings and bullet points.`;
    }

    const response = await groq.chat.completions.create({
      model: "llama-3.3-70b-versatile",
      messages: [
        {
          role: "system",
          content: "You are an expert meeting summarizer. Create clear, professional summaries that capture all important information from meeting transcripts. Use proper formatting with headings, bullet points, and clear organization. Always include action items with responsible parties when mentioned."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 2000,
      temperature: 0.3, // Lower temperature for more consistent, factual summaries
    });

    const summary = response.choices[0]?.message?.content;
    
    if (!summary) {
      throw new Error("No summary was generated by the AI service");
    }

    return summary.trim();
    
  } catch (error) {
    console.error("Error generating summary with Grok API:", error);
    
    if (error instanceof Error) {
      // Handle specific API errors
      if (error.message.includes("401")) {
        throw new Error("Invalid API key. Please check your GROQ_API_KEY configuration.");
      } else if (error.message.includes("429")) {
        throw new Error("Rate limit exceeded. Please try again in a moment.");
      } else if (error.message.includes("400")) {
        throw new Error("Invalid request. The transcript may be too long or contain unsupported content.");
      } else if (error.message.includes("503") || error.message.includes("502")) {
        throw new Error("AI service is temporarily unavailable. Please try again later.");
      }
      
      throw new Error(`Failed to generate summary: ${error.message}`);
    }
    
    throw new Error("An unexpected error occurred while generating the summary");
  }
}

// Helper function to validate transcript length and content
export function validateTranscript(transcript: string): { isValid: boolean; error?: string } {
  if (!transcript || !transcript.trim()) {
    return { isValid: false, error: "Transcript cannot be empty" };
  }
  
  const wordCount = transcript.trim().split(/\s+/).length;
  
  if (wordCount < 10) {
    return { isValid: false, error: "Transcript is too short. Please provide at least 10 words." };
  }
  
  // Rough estimate: 1 token â‰ˆ 0.75 words, with context window of 131072 tokens
  // Leave room for prompt and response
  const maxWords = 80000; 
  if (wordCount > maxWords) {
    return { isValid: false, error: `Transcript is too long. Maximum ${maxWords} words allowed.` };
  }
  
  return { isValid: true };
}
